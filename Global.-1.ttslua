--[[ Lua code. See documentation: https://api.tabletopsimulator.com/ --]]

--[[ The onLoad event is called after the game save finishes loading. --]]

-- dice = nil
snake = nil
snakes = nil
ladders = nil

CARD_ZONE_GUID = "be756b"
FINISH_TILE_GUID = "e38137"

function onLoad()
  zone = getObjectFromGUID(FINISH_TILE_GUID)

    -- firstLadder = spawnObject({type="Custom_Token", position=Vector(0,3,0)})
    -- firstLadder.setCustomObject({image = "https://cdn.discordapp.com/attachments/839221248437387265/1028733884566872234/Long_Snake_2.png", thickness = 0.001})
    -- secondLadder = spawnObject({type="Custom_Token", position=Vector(0,3,0)})
    -- secondLadder.setCustomObject({image = "https://cdn.discordapp.com/attachments/839221248437387265/1028727237312253952/Ladder_5_centered.png", thickness = 0.001})
    -- thirdLadder = spawnObject({type="Custom_Token", position=Vector(0,3,0)})
    -- thirdLadder.setCustomObject({image = "https://cdn.discordapp.com/attachments/839221248437387265/1028727237714911294/Ladder_1_centered.png", thickness = 0.001})
    -- fourthLadder = spawnObject({type="Custom_Token", position=Vector(0,3,0)})
    -- fourthLadder.setCustomObject({image = "https://cdn.discordapp.com/attachments/839221248437387265/1028727238050451628/Ladder_2_centered.png", thickness = 0.001})
    -- fifthLadder = spawnObject({type="Custom_Token", position=Vector(0,3,0)})
    -- fifthLadder.setCustomObject({image = "https://cdn.discordapp.com/attachments/839221248437387265/1028727238402773032/Ladder_3_centered.png", thickness = 0.001})

    snake1 = getObjectFromGUID("02c5af")
    snake1Tail = {-1, -4} --location of tail relative to head {x difference (left negative), y difference (down negative)}

    snake2 = getObjectFromGUID("d276ce")
    snake2Tail = {0, -2}

    snake3 = getObjectFromGUID("f8f64c")
    snake3Tail = {2, -3}

    snake4 = getObjectFromGUID("175c27")
    snake4Tail = {1, -3}

    snake5 = getObjectFromGUID("453cb8")
    snake5Tail = {1, -3}

    snake6 = getObjectFromGUID("f8c5b3")
    snake6Tail = {1, -2}

    snake7 = getObjectFromGUID("06063b")
    snake7Tail = {-1, -2}

    snake8 = getObjectFromGUID("e4f8df")
    snake8Tail = {-2, -3}

    snakes = {{snake1, snake1Tail}, {snake2, snake2Tail}, {snake3, snake3Tail}, {snake4, snake4Tail}, {snake5, snake5Tail}, {snake6, snake6Tail}, {snake7, snake7Tail}, {snake8, snake8Tail}}



    ladder1 = getObjectFromGUID("9a722f")
    ladder1Base = {-1,-2} -- {something, something}

    ladder2 = getObjectFromGUID("8e5509")
    ladder2Base = {-1,-3} -- {something, something}

    ladder3 = getObjectFromGUID("414e29")
    ladder3Base = {0,-1} -- {something, something}

    ladder4 = getObjectFromGUID("b5574d")
    ladder4Base = {-1,-2} -- {something, something}

    ladder5 = getObjectFromGUID("6e843d")
    ladder5Base = {1,-4} -- {something, something}

    ladders = {{ladder1, ladder1Base}, {ladder2, ladder2Base}, {ladder3, ladder3Base}, {ladder4, ladder4Base}, {ladder5, ladder5Base}}

    Wait.condition(function()
      print("End of game")
    end,
    function()
      local possibleWinner = nil
      if #zone.getObjects() == 0 then
          return false
      end
      possibleWinner = zone.getObjects()
      for k,v in pairs(possibleWinner) do  --go through all Objects
        if v != nil
        then
          winner = v
          print("Congratulations! You win")
          return true
        end
      end
      return false
      end)

end

function setupBoard()
    --a 10x10 matrix of available spaces, representing the board
    boardAvailability = {
      {true,true,true,true,true,true,true,true,true,true},
      {true,true,true,true,true,true,true,true,true,true},
      {true,true,true,true,true,true,true,true,true,true},
      {true,true,true,true,true,true,true,true,true,true},
      {true,true,true,true,true,true,true,true,true,true},
      {true,true,true,true,true,true,true,true,true,true},
      {true,true,true,true,true,true,true,true,true,true},
      {true,true,true,true,true,true,true,true,true,true},
      {true,true,true,true,true,true,true,true,true,true},
      {true,true,true,true,true,true,true,true,true,true}
    }

    --first set up the snake
    for i=1,8,1 do
      randomX=math.random(1,10)
      randomY=math.random(1,10)

      --keep regeneating random X and Y coordinates until a valid coordinate is found
      j = 1
      while(((randomX + snakes[i][2][1] > 10 or randomX + snakes[i][2][1] <= 0)
      or (randomY + snakes[i][2][2] > 10 or randomY + snakes[i][2][2] <= 1
      or not boardAvailability[randomX][randomY]
      or not boardAvailability[randomX + snakes[i][2][1]][randomY + snakes[i][2][2]]))
      and j<100)
      do

        randomX=math.random(1,10)
        randomY=math.random(1,10)
        j = j+1

      end

      --clear the head and tail location from possible boardlocations
      boardAvailability[randomX][randomY] = false --head

      boardAvailability[randomX + snakes[i][2][1]][randomY + snakes[i][2][2]] = false --tail

      boardAvailability[randomX + snakes[i][2][1]][randomY + snakes[i][2][2]+1] = false --tail + 1 to allow the snake to grow
      teleportObjectToBoardLoc(snakes[i][1], randomX, randomY)


    end

    for i=1, 5, 1 do
      randomX=math.random(1,10)
      randomY=math.random(1,10)

      j = 1
      --keep regeneating random X and Y coordinates until a valid coordinate is found
      while(((randomX + ladders[i][2][1] > 10 or randomX + ladders[i][2][1] <= 0)
      or randomY + ladders[i][2][2] > 10 or randomY + ladders[i][2][2] <= 1
      or not boardAvailability[randomX][randomY]
      or not boardAvailability[randomX + ladders[i][2][1]][randomY + ladders[i][2][2]])
      and j<1000) do
        randomX=math.random(1,10)
        randomY=math.random(1,10)
        j = j+1
      end
      boardAvailability[randomX][randomY] = false --head
      boardAvailability[randomX + ladders[i][2][1]][randomY + ladders[i][2][2]] = false --tail
      print(randomX)
      print(randomY)
      teleportObjectToBoardLoc(ladders[i][1], randomX, randomY)
    end
end

function teleportObjectToBoardLoc(object, x, y)
    --convert boardpos to worlpos(quickmafs)
    worldX = (x-1)*(14/9.0) - 7
    worldY = (y-1)*(14/9.0) - 7 + 0.6 --correction, dont know why dont ask :)))
    object.setPosition(vector(worldX,1.59,worldY))
end

--[[ The onUpdate event is called once per frame. --]]
function onUpdate()
    --[[ print('onUpdate loop!') --]]
end

function getSnakes()
    return snakes
end